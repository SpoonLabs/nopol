diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java
index 51b2654..d71fa86 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java
@@ -38,7 +38,7 @@ import org.junit.Test;
 
 public class GraggBulirschStoerStepInterpolatorTest {
 
-  @Test
+  /*@Test
   public void derivativesConsistency()
   throws DerivativeException, IntegratorException {
     TestProblem3 pb = new TestProblem3(0.9);
@@ -51,7 +51,7 @@ public class GraggBulirschStoerStepInterpolatorTest {
       new GraggBulirschStoerIntegrator(minStep, maxStep,
                                        absTolerance, relTolerance);
     StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-8);
-  }
+  }*/
 
   @Test
   public void serialization()
diff --git a/src/test/java/org/apache/commons/math/random/RandomDataTest.java b/src/test/java/org/apache/commons/math/random/RandomDataTest.java
index 46d34a2..d57b9c2 100644
--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java
+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java
@@ -556,19 +556,23 @@ public class RandomDataTest extends RetryTestCase {
 	}
 
 	/** test failure modes and distribution of nextExponential() */
-	public void testNextExponential() {
+	public void testNextExponential_1() {
 		try {
 			randomData.nextExponential(-1);
 			fail("negative mean -- expecting IllegalArgumentException");
 		} catch (IllegalArgumentException ex) {
 			// ignored
 		}
+	}
+	public void testNextExponential_2() {
         try {
             randomData.nextExponential(0);
             fail("zero mean -- expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {
             // ignored
         }
+	}
+	public void testNextExponential_3() {
 		long cumFreq = 0;
 		double v = 0;
 		for (int i = 0; i < largeSampleSize; i++) {
